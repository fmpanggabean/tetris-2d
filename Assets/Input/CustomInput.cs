//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Input/CustomInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @CustomInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @CustomInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""CustomInput"",
    ""maps"": [
        {
            ""name"": ""Gameplay"",
            ""id"": ""60c9f853-1127-407c-bfa5-7a08c522d690"",
            ""actions"": [
                {
                    ""name"": ""Immediate"",
                    ""type"": ""Button"",
                    ""id"": ""116f5704-ce4f-4fca-8826-e1eb2ef1aaee"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Fast"",
                    ""type"": ""Button"",
                    ""id"": ""76cfb54f-55c0-4cf7-a61b-2a0ace6f183d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RotatePiece"",
                    ""type"": ""Value"",
                    ""id"": ""062f8410-f9c0-4b6b-b68f-0b5feb772840"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MovePiece"",
                    ""type"": ""Value"",
                    ""id"": ""c92c7dcb-79db-4996-bebf-d3811e692890"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""af20de35-ac4f-41ef-8392-811271a1de3c"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Immediate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""63d0f79c-9c43-47b4-a365-773531149b18"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Fast"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""78abe966-6fdf-44ee-a0e5-52e84c3c97e2"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotatePiece"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""5a373881-984a-45f8-be4b-a4d4501ee436"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotatePiece"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""929db0d3-f3c6-4a77-992a-00481d8946e5"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotatePiece"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""6fb1bc74-8d3c-4545-a607-4fe5c379f78e"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovePiece"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""cd315053-58b3-407a-a87c-2b133ae0e5ab"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovePiece"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""079519c6-e30a-4a2b-88a3-0efcbddcd255"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovePiece"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Gameplay
        m_Gameplay = asset.FindActionMap("Gameplay", throwIfNotFound: true);
        m_Gameplay_Immediate = m_Gameplay.FindAction("Immediate", throwIfNotFound: true);
        m_Gameplay_Fast = m_Gameplay.FindAction("Fast", throwIfNotFound: true);
        m_Gameplay_RotatePiece = m_Gameplay.FindAction("RotatePiece", throwIfNotFound: true);
        m_Gameplay_MovePiece = m_Gameplay.FindAction("MovePiece", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Gameplay
    private readonly InputActionMap m_Gameplay;
    private List<IGameplayActions> m_GameplayActionsCallbackInterfaces = new List<IGameplayActions>();
    private readonly InputAction m_Gameplay_Immediate;
    private readonly InputAction m_Gameplay_Fast;
    private readonly InputAction m_Gameplay_RotatePiece;
    private readonly InputAction m_Gameplay_MovePiece;
    public struct GameplayActions
    {
        private @CustomInput m_Wrapper;
        public GameplayActions(@CustomInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Immediate => m_Wrapper.m_Gameplay_Immediate;
        public InputAction @Fast => m_Wrapper.m_Gameplay_Fast;
        public InputAction @RotatePiece => m_Wrapper.m_Gameplay_RotatePiece;
        public InputAction @MovePiece => m_Wrapper.m_Gameplay_MovePiece;
        public InputActionMap Get() { return m_Wrapper.m_Gameplay; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameplayActions set) { return set.Get(); }
        public void AddCallbacks(IGameplayActions instance)
        {
            if (instance == null || m_Wrapper.m_GameplayActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GameplayActionsCallbackInterfaces.Add(instance);
            @Immediate.started += instance.OnImmediate;
            @Immediate.performed += instance.OnImmediate;
            @Immediate.canceled += instance.OnImmediate;
            @Fast.started += instance.OnFast;
            @Fast.performed += instance.OnFast;
            @Fast.canceled += instance.OnFast;
            @RotatePiece.started += instance.OnRotatePiece;
            @RotatePiece.performed += instance.OnRotatePiece;
            @RotatePiece.canceled += instance.OnRotatePiece;
            @MovePiece.started += instance.OnMovePiece;
            @MovePiece.performed += instance.OnMovePiece;
            @MovePiece.canceled += instance.OnMovePiece;
        }

        private void UnregisterCallbacks(IGameplayActions instance)
        {
            @Immediate.started -= instance.OnImmediate;
            @Immediate.performed -= instance.OnImmediate;
            @Immediate.canceled -= instance.OnImmediate;
            @Fast.started -= instance.OnFast;
            @Fast.performed -= instance.OnFast;
            @Fast.canceled -= instance.OnFast;
            @RotatePiece.started -= instance.OnRotatePiece;
            @RotatePiece.performed -= instance.OnRotatePiece;
            @RotatePiece.canceled -= instance.OnRotatePiece;
            @MovePiece.started -= instance.OnMovePiece;
            @MovePiece.performed -= instance.OnMovePiece;
            @MovePiece.canceled -= instance.OnMovePiece;
        }

        public void RemoveCallbacks(IGameplayActions instance)
        {
            if (m_Wrapper.m_GameplayActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGameplayActions instance)
        {
            foreach (var item in m_Wrapper.m_GameplayActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GameplayActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GameplayActions @Gameplay => new GameplayActions(this);
    public interface IGameplayActions
    {
        void OnImmediate(InputAction.CallbackContext context);
        void OnFast(InputAction.CallbackContext context);
        void OnRotatePiece(InputAction.CallbackContext context);
        void OnMovePiece(InputAction.CallbackContext context);
    }
}
